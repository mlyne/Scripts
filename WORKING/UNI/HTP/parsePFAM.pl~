#!/usr/bin/perl

use strict;
use warnings;

my $usage = "Usage: parsePFAM.pl processed_blast_file diffExpr_blast_file

## Input three tab sep files

# func_file: locusID, [... otherstuf ...], PFAM terms of format:
# PFAMnumber:term name

# diffExpr_blast_file - from up or down regulated gene sets 
# TAB sep format slightly different to func_file but treated the same
# locusID, [... otherstuf ...], PFAM terms, etc
\n";

my $func_file = $ARGV[0];
my $diffExpr_file = $ARGV[1];

unless ( $ARGV[1] ) { die $usage }

my ($refSize, $sampSize);

open FUNC_IN, "$func_file" or die "can't open file";
#open(OUT_FILE, "> $out_file.txt") || die "cannot open $out_file: $!\n";

my (%PFAM_descn, %PFAMcountAll);

while (<FUNC_IN>) {
  chomp $_;
#  next unless $_ =~ /ZDB-GENE/; # subset with ZFIN IDs - remove for full analysis
  next if $_ =~ /NO PFAM/; # discard results with no GO terms
  
  my @split = split( /\t/, $_ ); # split the file to an array
  my $locus = $split[0]; # use array addresses to access values eg. Locus ID

  my @PFAMlist = split( /\; /, $split[6] ); # split the PFAM terms to an array
  $refSize++ if @PFAMlist; # count how many reference results have PFAM terms

  foreach my $PFAMterm (@PFAMlist) {
    my ($idNo, $name) = split( /\:/, $PFAMterm ); # split each PFAM hit

    $PFAM_descn{$idNo} = $name;
    $PFAMcountAll{$idNo}++;

    }
#      print "\n";
}

close FUNC_IN;

open DIFF_IN, "$diffExpr_file" or die "can't open file";

my (%PFAMcountDiff); # set up a count for sample PFAM term freq

while (<DIFF_IN>) {
  chomp $_;
#  next unless $_ =~ /ZDB-GENE/; # remove for full analysis
  next unless $_ =~ /Locus_/;
  next if $_ =~ /NO PFAM/; # don't process hits without PFAM results
  next if $_ =~ /NOT FOUND in BLAST FILE/; # don't process hits without blast res

  my @split = split( /\t/, $_ );
  my $locus = $split[0];

  my @PFAMlist = split( /\; /, $split[8] ); # split PFAM hits (col#9) into array
  $sampSize++ if @PFAMlist;

  foreach my $PFAMterm (@PFAMlist) {
    my ($idNo, $name) = split( /\:/, $PFAMterm );

#    $sampSize++; # count how many sample results have PFAM terms
    $PFAMcountDiff{$idNo}++; # count the sample term 
  }
#      print "\n";
}

close DIFF_IN; # close the sample file

#print "REF: ", $refSize, "\tSAMP: ", $sampSize, "\n";

print "BonfCorrect\tun-adj p-val\tPFAMid\tPFAMname\trefSize refPosHits sampSize sampPosHits\n"; # headings

foreach my $diffTerm  (keys %PFAMcountDiff ){
  if (exists $PFAMcountAll{$diffTerm} ) {
    my $refPos = $PFAMcountAll{$diffTerm}; # get the count for reference set positives
    my $samPos = $PFAMcountDiff{$diffTerm}; # get the count for sample set positives

# Here's the call to Adrian's hypergeometric function
# In this order, we give it:
#reference size = $refSize;
#reference positives = $refPos;
#sample size = $sampSize;
#sample positives = $samPos;

    my $pval = &uppertail_hypergeometric($refSize,$refPos,$sampSize,$samPos);
    my $bonf = $pval * $sampSize;

    print $bonf, "\t", $pval, "\t", $diffTerm, "\t", $PFAM_descn{$diffTerm}, "\t" .
    "$refSize $refPos $sampSize $samPos" .
    "\n";
  }
#  print "$GOcountDiff{$termTotal}\t$termTotal\n";
}

### Hypergeometric Distribution sub
sub uppertail_hypergeometric {

# In this order, we give it:
#reference size = $refSize = $N
#reference positives = $refPos = $m
#sample size = $sampSize = $n
#sample positives = $samPos = $k

    my ($N, $m, $n, $k) = @_;
    my $not_m = $N - $m;
    my ($i, $i_max, $uppertail_hypergeom3);

	if ($m < $n ){$i_max = $m;} else { $i_max = $n;} 
    
    for($i=$i_max; $i >= $k; $i--) 
    {
		#print "$m $not_m $n $i\n";
        $uppertail_hypergeom3 += &hypergeom($m,$not_m,$n,$i);
    }

    return $uppertail_hypergeom3;
}

sub logfact {
   return gammln(shift(@_) + 1.0);
}

sub hypergeom {
   my ($n, $m, $N, $i) = @_;

   my $loghyp1 = logfact($m)+logfact($n)+logfact($N)+logfact($m+$n-$N);
   my $loghyp2 = logfact($i)+logfact($n-$i)+logfact($m+$i-$N)+logfact($N-$i)+logfact($m+$n);
   return exp($loghyp1 - $loghyp2);
}

sub gammln {
  my $xx = shift;
  my @cof = (76.18009172947146, -86.50532032941677,
             24.01409824083091, -1.231739572450155,
             0.12086509738661e-2, -0.5395239384953e-5);
  my $y = my $x = $xx;
  my $tmp = $x + 5.5;
  $tmp -= ($x + .5) * log($tmp);
  my $ser = 1.000000000190015;
  for my $j (0..5) {
     $ser += $cof[$j]/++$y;
  }
  -$tmp + log(2.5066282746310005*$ser/$x);
}


