#!/usr/bin/perl
#
#

#use strict;
use warnings;

package SynbioRegionSearch;

require Exporter;
@ISA = qw(Exporter);
@EXPORT = qw(regionSearch);

# Print unicode to standard out
binmode(STDOUT, 'utf8');
# Silence warnings when printing null fields
no warnings ('uninitialized');

sub regionSearch {
  my $region = shift;
  $region =~ m/(NC_.+)\:/;
  my $chromosome = $1; 

  ($chromosome) || die "not found: $chromosome$!\n";

  my $org_short = &fetch_organism($chromosome);
  &region_search($region, $org_short);

}
1;

sub fetch_organism {
  use Webservice::InterMine 0.9904 'http://met1:8080/synbiomine-exper';

  my $chromosome = shift;

  my $chrom_query = new_query(class => 'Chromosome');

  # The view specifies the output columns
  $chrom_query->add_view(qw/
      primaryIdentifier
      organism.shortName
  /);

  $chrom_query->add_constraint(
      path  => 'Chromosome.primaryIdentifier',
      op    => '=',
      value => "$chromosome",
      code  => 'A',
  );

  # Use an iterator to avoid having all rows in memory at once.
  my $org_short;
  my $it = $chrom_query->iterator();

  while (my $row = <$it>) {
    $org_short = $row->{'organism.shortName'};
  }
  return $org_short;
}

sub region_search {

  use Webservice::InterMine::Bio::RegionQuery qw/GFF3/;
  use Webservice::InterMine 0.9904;

  my ($region, $org_short) = @_;

  # my $service = Webservice::InterMine->get_service('http://www.flymine.org/synbiomine');
  my $service = Webservice::InterMine->get_service('http://met1:8080/synbiomine-exper');
  my $region_query = Webservice::InterMine::Bio::RegionQuery->new(
      service => $service,
      organism => "$org_short",
      regions => ["$region", ],
      feature_types => ["Gene"]
  );

  my $gffRes = $region_query->gff3;
  my @gffs = split("\n", $gffRes);
  shift(@gffs);

  my @genes = map { m/ID=(.+)/ ? $1 : $_ } @gffs;
#  print join("\t", @genes), "\n";
  return ($org_short, \@genes);

  #print join("\n", @gffs), "\n";

#   foreach my $gff (@gffs) {
#     my @gff_fields = split("\t", $gff);
#     my $gene_field = pop(@gff_fields);
#     $gene_field =~ m/ID=(.+)/;
#     my $gene = $1;
#   #  print $gene, "\n";
# 
#     my ($found_gene, $expression_ref) = &fetch_expression($gene, $org_short);
#     return ($found_gene, $expression_ref);
#   }
}
