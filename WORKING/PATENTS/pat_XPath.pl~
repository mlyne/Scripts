#!/usr/bin/perl

use strict;
use warnings;
use LWP::UserAgent;
use HTTP::Request::Common qw/POST/;
#use URI::Escape;
use XML::XPath;
use XML::XPath::XMLParser;

my $usage = "Usage:epo_patent.pl query_file out_file
    

n";

unless ( $ARGV[0] ) { die $usage }

# specify and open query file (format: )
my $query_file = $ARGV[0];
open(QFILE, "< $query_file") || die "cannot open $query_file: $!\n";

while (<QFILE>)
{
  chomp;
#  my ($query, $range) = split(/\t/, $_);
  my ($searchStr, $range) = split(/\t/, $_);
  my $query = "$searchStr";

# Create a user agent
my $ua = LWP::UserAgent->new();
 
 # URL for service (endpoint) 
 my $url = 'http://ops.epo.org/3.0/rest-services/published-data/search/biblio';
 
 my $request = POST ( $url, 
		      Range => $range,
		      Content => [ 'q' => "$query" ]
 );
 
 my $response = $ua->request($request);
 die 'http status: ' . $response->code . ' ' . $response->message unless ($response->is_success); 
 
#    $countHead =~ m|<Count>(\d+)</Count>.*<QueryKey>(\d+)</QueryKey>.*<WebEnv>(\S+)</WebEnv>|s;
  my $out = $response->content();
  my $valid = "true" if ($out =~ m/search-result/);

# Then use grep to retrieve the line with reference info
# feed into $entry

  my ($hitCount) = defined $valid ? ($out =~ m/biblio\-search total\-result\-count\=\"(\d+)\"/) : ("12321");
  print "Count: ", $hitCount, "\n";
 
  my $xpatXP = XML::XPath->new(xml => $response->content);

print "*** Doing some stuff now ***\n\n";

#    foreach my $LabelValue ( $concept->findnodes('LabelValueList/LabelValue')) {

  foreach my $entry ( $xpatXP->findnodes('//exchange-document')) {
    print "family: ", $entry->getAttribute('family-id'), "\n";

# my $concept ($xp->findnodes('/NCI_PID_XML/Ontology/LabelType')) {
#     my $parentid = $concept->getAttribute('id');
#     }

  foreach my $docNode ($entry->find('//doc-number')->get_nodelist) {
      print "docId: ", $docNode->string_value, "\n";
  }

  }
#         # get tagged sentences from nlp.ncibi.org
#         $response = $ua->get("http://nlp.ncibi.org/fetch?tagger=nametagger&type=gene&pmid=$pmid");
#         my $nlpXP = XML::XPath->new(xml => $response->content);
        


#  print Dumper( $out );
#  print $out;
 
#  my $twig = new XML::Twig( twig_handlers => { 'exchange-document' => \&process_patRes });
#  $twig->parse( $out );
 
 # Output the entry
# print $response->content();
  
  # To comply with fair use policy
  sleep(5);
# select(undef, undef, undef, 5); # EPO requires that we have no more than 10 requests / minute so delay 5 secs

}

close(QFILE);


sub process_patRes {
  my ($twig, $entry) = @_;
  
  my $fam = $entry->first_descendant('doc-number')->text;
  print "Processing doc number $fam...\n";

}
