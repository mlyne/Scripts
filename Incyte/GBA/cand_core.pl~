#!/usr/local/bin/perl -w
#
#
#
#

use Getopt::Std;
use POSIX;
use strict;

my $usage = "Usage:parse_gba_grep.pl [-h] [-c <number>] pattern_file " .
    "gb_grep_results_file

\t-h help
\t-c cut off for core members hit 
\t   (default >= 2 core members)
";

unless ( $ARGV[1] ) { die $usage }

### command line options ###
my (%opts, $cutoff, $number);

getopts('hc:o', \%opts);
defined $opts{"h"} and die $usage;

defined $opts{"c"} and $cutoff = $opts{"c"};
if (defined $cutoff)
{
  $number = getnum($cutoff);
  unless ($number)
  {
    die "Invalid cutoff value: $cutoff\n";
  }
}
else
{
  print STDERR "No cutoff specified. Defaulting to >= 2 core member\n";
  $number = 2;
}

my $pattern_file = $ARGV[0];
my $results_file = $ARGV[1];

open(PATTERN_FILE, "< $pattern_file") || die "cannot open $pattern_file: $!";

my @pattern_list = ();

while (<PATTERN_FILE>)
{
  chomp;
#  print "$_\n";
  push(@pattern_list, $_);
}

close(PATTERN_FILE) || die "cannot open $pattern_file: $!";

my $pattern;
my ($gene_id1, $gene_id2, $score);
my %gba_hits = ();
my %gba_counts = ();

open(RESULTS_FILE, "< $results_file") || die "cannot open $results_file: $!";

while (<RESULTS_FILE>)
{
  chomp;
  ($gene_id1, $gene_id2, $score) = split(/\t/, $_);
#  print "$gene_id1, $gene_id2, $score\n";
  foreach $pattern (@pattern_list)
  {
    if ($pattern eq $gene_id1)
    {
      push( @{ $gba_hits{$gene_id2} }, [$score, $gene_id1]);
      $gba_counts{$gene_id2}++;
    }
    elsif ($pattern eq $gene_id2)
    {
      push( @{ $gba_hits{$gene_id1} },  [$score, $gene_id2]);
      $gba_counts{$gene_id1}++;
    }
  }
}

my $gba_count;
my $gba_hit;
my $i;

foreach $gba_count (sort keys %gba_counts)
{
  if ($gba_counts{$gba_count} >= $number)
  {
    print "$gba_count : Hit $gba_counts{$gba_count} CGC candidates!\n";
#    foreach $gba_hit (sort keys %gba_hits)
#    {
      for $i (0 .. $#{ $gba_hits{$gba_count} })
      {
	my ($hash_score, $query_id) = @{ $gba_hits{$gba_count}->[$i] };
	print "$query_id\t$hash_score\n";
      }
    print "=\n";
#    }
  }
}


###             ###
### subroutines ###
###             ###

# checks to see whether the value #
# returned is a number - returns  #
# the number if true, or undef if #
# false                           #
sub getnum
{
  use POSIX qw(strtod);
  my $str = shift;
  $str =~ s/^\s+//;
  $str =~ s/\s+$//;
  $! = 0;
  my($num, $unparsed) = strtod($str);
  if (($str eq '') || ($unparsed != 0) || $!)
  {
    return;
  }
  else
  {
    return $num;
  }

}
